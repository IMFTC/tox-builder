#!/bin/bash

# Copyright (C) 2014 Volker Sobek <reklov@live.com>
#
# This file is part of tox-builder.
#
# tox-builder is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Tox is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with tox-builder.  If not, see <http://www.gnu.org/licenses/>.


# === INSTALLING TOXIC ===
#
# If you have all system dependencies installed (most likely you have
# not yet) all you need to do to install libsodium, ProjectTox-Core
# and toxic from their git repositories on github.com is running:
#
#   tox-builder update
#
# (Should you hit an error because of missing dependencies you can
# install them and then simply run this command again.)
#
# After successfully running the above command, you can run toxic with:
#
#   tox-builder run toxic
#
# This will launch toxic with the LD_LIBRARY_PATH and PATH env
# variables set to include the installation path.
#
#
# === VENOM ===
#
# If you also want to build and install the gtk+ client Venom, you can
# append 'venom' to the DEFAULT_MODULES variable in the CONFIG section
# below and then run 'tox-builder update'. As you might have
# guessed, you can then launch venom with:
#
#  tox-builder run venom
#
#
# === UPDATING YOUR INSTALLATION ===
#
# If you later want to update your local installation to include the
# latest upstream changes, simply run:
#
#   tox-builder update
#
# again. This will git pull from each of the github repositories and
# rebuild and reinstall all modules whose configured branch (see
# CONFIG section below) has new (remote or local) commits compared to
# their installed versions or whose installed versions had been
# tainted (contained uncommited changes).
#
#
# === BUILD COMMAND ===
#
# You can use the 'build' command instead of the 'update' command to
# force an unconditional uninstall/rebuild/install of the given
# modules from the local source directories without running any git
# commands beforehand, so the code of the specified modules will be
# compiled and installed as it is. This is useful if you are hacking
# any of the components yourself without making local git commits
# (Though not making git commits yourself is a bad idea ;-)).
#
#
# === LOCATIONS ===
#
# By default tox-builder clones the git repositories of all modules to
#
#   $HOME/tox-builder/checkout/
#
# and installs to
#
#   $HOME/tox-builder/install/
#
# TODO: Install system dependencies depending on the OS
#

# Don't touch these
declare -A GIT_URL GIT_BRANCH GIT_TAG GIT_LOG
declare -A BUILD_CMAKE BUILD_AUTO BUILD_CONFIGURE BUILD_MAKE
declare -A BUILD_INSTALL POST_INSTALL_INFO

########################################################################
#                               CONFIG
# TOX_BUILDER_DIR
# Everything (checkouts of git repos and the installation) will happen
# in this directory. After successfully running this script you should
# end up with something like this:
#
# $TOX_BUILDER_DIR
# |-- checkout
# |   |-- libsodium       (git repo)
# |   |-- projecttox-core (git repo)
# |   `-- toxic           (git repo)
# `-- install             (this script will install to this folder)
#     |-- bin
#     |-- include
#     |-- lib
#     `-- share
TOX_BUILDER_DIR="$HOME/tox-builder"
#
# Which modules should be built/updated if no module names were given
# to 'build'/'update' commands? Modules must be in correct order! If
# you want to build Venom by default as well, append venom to this list:
DEFAULT_MODULES="libsodium projecttox-core toxic"
#
# L I B S O D I UM
# https://github.com/jedisct1/libsodium/#installation
GIT_URL[libsodium]="https://github.com/jedisct1/libsodium.git"
GIT_TAG[libsodium]="0.4.2"
BUILD_AUTO[libsodium]="./autogen.sh"
BUILD_CONFIGURE[libsodium]="./configure\
 --prefix='$TOX_BUILDER_DIR/install'"
BUILD_MAKE[libsodium]="make && make check"
BUILD_MAKE[libsodium]="make"
BUILD_INSTALL[libsodium]="make install"
#
# P R O J E C T T O X - C O R E
# https://github.com/irungentoo/ProjectTox-Core/blob/master/INSTALL.md#unix
GIT_URL[projecttox-core]="https://github.com/irungentoo/ProjectTox-Core.git"
GIT_BRANCH[projecttox-core]="master"
BUILD_AUTO[projecttox-core]="autoreconf -i"
BUILD_CONFIGURE[projecttox-core]="./configure\
 --prefix='$TOX_BUILDER_DIR/install'\
 --with-dependency-search='$TOX_BUILDER_DIR/install'"
BUILD_MAKE[projecttox-core]="make"
BUILD_INSTALL[projecttox-core]="make install"
#
# T O X I C
# http://wiki.tox.im/Toxic#Building
GIT_URL[toxic]="https://github.com/Tox/toxic.git"
GIT_BRANCH[toxic]="master"
BUILD_AUTO[toxic]="autoreconf -i" # no -f here because it updates the outdated ./INSTALL which is tracked by git
BUILD_CONFIGURE[toxic]="./configure\
 --prefix='$TOX_BUILDER_DIR/install'\
 --with-dependency-search='$TOX_BUILDER_DIR/install'"
BUILD_MAKE[toxic]="make && make check"
BUILD_INSTALL[toxic]="make install"
POST_INSTALL_INFO[toxic]="To launch toxic run: $0 run toxic"
#
# V E N O M
# https://github.com/naxuroqa/Venom/blob/master/INSTALL.md#linux
GIT_URL[venom]="https://github.com/naxuroqa/Venom.git"
GIT_BRANCH[venom]="master"
BUILD_CMAKE[venom]="mkdir build && cd build &&\
 PKG_CONFIG_PATH='$TOX_BUILDER_DIR/install/lib/pkgconfig' cmake\
 -DCMAKE_INSTALL_PREFIX='$TOX_BUILDER_DIR/install' .."
BUILD_MAKE[venom]="make"
BUILD_INSTALL[venom]="make install"
POST_INSTALL_INFO[venom]="To launch Venom run: $0 run venom"
#
#
AVAILABLE_MODULES="libsodium projecttox-core toxic venom"
############################################################################

bold=
boldoff=
type tput >& /dev/null && {
    bold=$(tput bold 2>/dev/null)
    boldoff=$(tput sgr0 2>/dev/null)
}

echo_bold() {
    echo "${bold}${@}${boldoff}"
}

quit_on_error() {
    echo_bold "An error occurred, quitting"
    exit
}

help_and_quit() {
    echo "\
Usage: tox-builder (update|build) [MODULE-NAME...]
Valid MODULE-NAME values: $AVAILABLE_MODULES

  tox-builder update
  tox-builder update MODULE-NAME...

Reinstall (or install for the first time, if not installed yet) the
given modules to include their new upstream/local commits. If no
module names are given, the following ones will be used:

$DEFAULT_MODULES

  tox-builder build
  tox-builder build MODULE-NAME...

Force an unconditional uninstall/rebuild/install from the local source
directories of the given modules without running any git commands
beforehand, so the code of the specified modules will be compiled and
installed as it is. If no module names are given, the following ones
will be used:

$DEFAULT_MODULES

  tox-builder run (toxic|venom)

Run toxic or Venom from the tox-builder install directory with the
correct environment variables set."

    exit
}

# Checks whether $TOX_BUILDER_DIR/{checkout,install} exist and are
# safe to use.  If they don't exist yet, try to create them, if that
# fails exit the script with an error message.
check_tox_builder_dirs() {
    if [[ -w "$TOX_BUILDER_DIR" ]]; then
        if [[ -w "$TOX_BUILDER_DIR/.used-by-tox-builder" ]]; then
            # Ensure the checkout and install subdirs exist
            mkdir -p "$TOX_BUILDER_DIR/checkout" &&
            mkdir -p "$TOX_BUILDER_DIR/install" &&
            echo_bold "Using directory: $TOX_BUILDER_DIR" ||

            quit_on_error
        else
            echo "============================================================"
            echo "The directory"
            echo "   '$TOX_BUILDER_DIR'"
            echo "exists but it looks like it was not created by tox-builder."
            echo "if you want to use it anyway run the command:"
            echo "  touch '$TOX_BUILDER_DIR/.used-by-tox-builder'"
            echo "and re-run this script."
            echo "============================================================"

            quit_on_error
        fi
    else
        echo_bold "Creating directory layout in '$TOX_BUILDER_DIR' …" &&
        mkdir -p "$TOX_BUILDER_DIR" &&
        # Let's be able to see that the folder was created by this script
        touch "$TOX_BUILDER_DIR/.used-by-tox-builder" &&
        mkdir -p "$TOX_BUILDER_DIR/checkout" &&
        mkdir -p "$TOX_BUILDER_DIR/install" ||

        quit_on_error
    fi
}

clone_module() {
    echo_bold "Cloning module $1 …" &&
    cd "$TOX_BUILDER_DIR/checkout" &&

    echo "git clone ${GIT_URL[$1]} $1" &&
    git clone "${GIT_URL[$1]}" $1 ||

    quit_on_error
}

# Builds and installs the module if it has been updated since it was
# last built and installed or if wasn't installed yet.
update_module() {
    local module_changes=
    local old_head
    local new_head

    echo_bold "Updating module $1 …" &&

    GIT_LOG[$1]=

    if [[ ! -d "$TOX_BUILDER_DIR/checkout/$1" ]]; then

        # in case the repo was deleted manually forget that it had
        # been installed
        rm -f "$TOX_BUILDER_DIR/$1.installed"

        clone_module $1
    fi

    cd "$TOX_BUILDER_DIR/checkout/$1" ||
    quit_on_error

    if [[ ${GIT_BRANCH[$1]} ]]; then
        echo "git checkout ${GIT_BRANCH[$1]}" &&
        git checkout "${GIT_BRANCH[$1]}" &&

        echo "git pull --rebase" &&
        git pull --rebase ||

        quit_on_error
    elif [[ $GIT_TAG[$1] ]]; then
        echo "git checkout ${GIT_TAG[$1]}" &&
        git checkout "${GIT_TAG[$1]}" ||

        quit_on_error
    fi

    old_head=$(cat "$TOX_BUILDER_DIR/$1.installed" 2>/dev/null)

    new_head=$(git rev-parse HEAD)

    if [[ $new_head != $old_head ]]; then
        # if the HEAD's hash is different from the installed version
        # or there are uncommited changes, rebuild
        if [[ -z $old_head ]]; then
            echo_bold "Module $1 has not been intsalled yet"
            GIT_LOG[$1]="New install"
        else
            echo_bold "Module $1 has been updated"
            # store short log of the changes for later display
            if [[ $old_head == *-tainted ]]; then
                GIT_LOG[$1]="Previous install was tainted, installed now: ${new_head}"
            else
                GIT_LOG[$1]=$(git log --oneline ${old_head}..${new_head} 2>&1)
            fi

        fi

        build_module $1

    else
        echo_bold "Module $1 is already up to date"
    fi
}

# Unconditionally builds or rebuilds the given module, *without*
# updating the repo beforehand. However, it does clone the repo first,
# if it hasn't been cloned yet.
build_module() {
    local new_head

    echo_bold "Building module $1 …"

    if [[ ! -d "$TOX_BUILDER_DIR/checkout/$1" ]]; then
        clone_module $1
    fi

    cd "$TOX_BUILDER_DIR/checkout/$1" ||
    quit_on_error

    uninstall_module $1

    echo "git clean -fdx"
    git clean -fdx

    # cmake commands
    [[ ${BUILD_CMAKE[$1]} ]] && {
        echo ${BUILD_CMAKE[$1]} &&
        eval ${BUILD_CMAKE[$1]} ||
        quit_on_error
    }

    # ./autogen.sh or autoreconf command
    [[ ${BUILD_AUTO[$1]} ]] && {
        echo ${BUILD_AUTO[$1]} &&
        eval ${BUILD_AUTO[$1]} ||
        quit_on_error
    }

    # ./configure command
    [[ ${BUILD_CONFIGURE[$1]} ]] && {
        echo ${BUILD_CONFIGURE[$1]} &&
        eval ${BUILD_CONFIGURE[$1]} ||
        quit_on_error
    }

    # make commands
    [[ ${BUILD_MAKE[$1]} ]] && {
        echo ${BUILD_MAKE[$1]} &&
        eval ${BUILD_MAKE[$1]} ||
        quit_on_error
    }

    # install command
    [[ ${BUILD_INSTALL[$1]} ]] && {
        echo ${BUILD_INSTALL[$1]} &&
        eval ${BUILD_INSTALL[$1]} ||
        quit_on_error
    }

    # remember installed version
    new_head=$(git rev-parse HEAD)
    git diff --quiet HEAD || new_head="${new_head}-tainted"

    echo $new_head > "$TOX_BUILDER_DIR/$1.installed"

    echo_bold "Module ${1} installed successfully (${new_head})"
    [[ ${POST_INSTALL_INFO[$1]} ]] &&
    echo ${POST_INSTALL_INFO[$1]}
}

update() {
    local modules
    local have_updates=
    check_tox_builder_dirs

    if [[ -z $1 ]]; then
        modules=$DEFAULT_MODULES
    else
        modules="$@"
    fi

    for module in $modules; do
        update_module $module
    done

    echo_bold "=== UPDATE SUMMARY ==="
    for module in $modules; do
        if [[ -n ${GIT_LOG[$module]} ]]; then
            echo_bold "Changes for $module:"
            echo "${GIT_LOG[$module]}"
            have_updates="yes"
        fi
    done

    if [[ -z $have_updates ]]; then
        echo "No modules have been updated"
    fi
}

build() {
    local modules
    check_tox_builder_dirs

    if [[ -z $1 ]]; then
        modules=$DEFAULT_MODULES
    else
        modules="$@"
    fi

    for module in $modules; do
        build_module $module
    done
}

uninstall_module() {
    local line

    cd "$TOX_BUILDER_DIR/checkout/$1" ||
    quit_on_error

    if [[ -f ./Makefile ]]; then
        echo_bold "Uninstalling module $1 …"
        echo "make uninstall"
        make uninstall
    elif [[ -f ./build/install_manifest.txt ]]; then
        # CMake for Venom
        echo_bold "Uninstalling module $1 …"
        while read line
        do
            rm -v "$line"
        done < ./build/install_manifest.txt
        rm -v ./build/install_manifest.txt
    fi

    # clear installed version info
    rm -f "$TOX_BUILDER_DIR/$1.installed"
}

run() {
    PATH="$TOX_BUILDER_DIR/install/bin:$PATH" \
        LD_LIBRARY_PATH="${TOX_BUILDER_DIR}/install/lib" \
        XDG_DATA_HOME="$TOX_BUILDER_DIR/install/share" $@
}
########################################################################
#                                MAIN
########################################################################

if [[ $(id -u) -eq 0 ]]; then
    echo "You should not run this script as user root!"
    quit_on_error
fi

case "$1" in
    "--help"|"-h"|"help")
        help_and_quit
        ;;
    "build")
        shift 1
        build ${@,,}
        ;;
    "update")
        shift 1
        update ${@,,}
        ;;
    "run")
        shift 1
        run $@
        ;;
    *) echo -e "Invalid or missing arguments\n"
        help_and_quit
        ;;
esac
